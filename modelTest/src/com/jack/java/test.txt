package com.gamecloudstudios.basketball.v2.server;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.gamecloudstudios.basketball.NoSuchUserProfileException;
import com.gamecloudstudios.basketball.dao.UserProfileDAOImpl;
import com.gamecloudstudios.basketball.model.UserProfile;
import com.gamecloudstudios.basketball.server.AbstractBaseService;
import com.gamecloudstudios.basketball.v2.server.wallet.WalletBaseService;

@Service
@Transactional(rollbackFor = Exception.class)
public class WalletServiceImplement extends AbstractBaseService implements WalletService {

    @Autowired
    private WalletBaseService walletBaseServiceImpl;

    @Autowired
    private UserUpgradeService userUpgradeServiceImplement;

    @Override
    public long createCashWallet(Long userId) {
        return walletBaseServiceImpl.createCashWallet(userId);
    }

    @Override
    public long createCoinWallet(Long userId) {
        return walletBaseServiceImpl.createCoinWallet(userId);
    }

    @Override
    public void deductCoins(long userId, int coins) throws NoSuchUserProfileException {
        deductCoins(userId, coins, "Deduct coins");
    }

    @Override
    public void addCoins(long userId, int coins) throws NoSuchUserProfileException {
        addCoins(userId, coins, "Add coins");
    }

    @Override
    public void consumeDiamond(long userId, int diamond, String description) throws NoSuchUserProfileException {
        assertUserExist(userId);
        UserProfile userProfile = UserProfileDAOImpl.getDAO().fetchById(userId);
        long cashWalletId = userProfile.getCashWalletId();
        //walletEngineProxy.deductCash(accountId, cashWalletId, description, diamond);
        walletBaseServiceImpl.consumeDiamonds(userId, cashWalletId, description, diamond);
    }

    @Override
    public void buyDiamond(long userId, int diamond) throws NoSuchUserProfileException {
        assertUserExist(userId);
        UserProfile userProfile = UserProfileDAOImpl.getDAO().fetchById(userId);
        long cashWalletId = userProfile.getCashWalletId();
        //walletEngineProxy.addCash(accountId, cashWalletId, "buy diamond", diamond);
        walletBaseServiceImpl.buyDiamonds(userId, cashWalletId, "buy diamond", diamond);
    }

    @Override
    public void rewardDiamond(long userId, int diamond, String description) throws NoSuchUserProfileException {
        assertUserExist(userId);
        UserProfile userProfile = UserProfileDAOImpl.getDAO().fetchById(userId);
        long cashWalletId = userProfile.getCashWalletId();
        //walletEngineProxy.addCash(accountId, cashWalletId, description, diamond);
        walletBaseServiceImpl.rewardDiamonds(userId, cashWalletId, description, diamond);
    }

    @Override
    public long getCoinByUserId(long userId) throws NoSuchUserProfileException {
        assertUserExist(userId);
        UserProfile userProfile = UserProfileDAOImpl.getDAO().fetchById(userId);
        long coinWalletId = userProfile.getCoinWalletId();
        //long coin = walletEngineProxy.getCoin(userId, coinWalletId);
        long coin = walletBaseServiceImpl.getUserCoin(coinWalletId);
        return coin;
    }

    @Override
    public long getDiamondByUserId(long userId) throws NoSuchUserProfileException {
        assertUserExist(userId);
        UserProfile userProfile = UserProfileDAOImpl.getDAO().fetchById(userId);
        long cashWalletId = userProfile.getCashWalletId();
        //long cash = walletEngineProxy.getCash(accountId, cashWalletId);
        long cash = walletBaseServiceImpl.getUserCash(cashWalletId);
        return cash;
    }

    @Override
    public void deductCoins(long userId, int coins, String description)
            throws NoSuchUserProfileException {
        assertUserExist(userId);
        UserProfile userProfile = UserProfileDAOImpl.getDAO().fetchById(userId);
        long coinWalletId = userProfile.getCoinWalletId();
        walletBaseServiceImpl.deductCoins(userId, coinWalletId, description, coins);
    }

    @Override
    public void addCoins(long userId, int coins, String description)
            throws NoSuchUserProfileException {
        assertUserExist(userId);
        UserProfile userProfile = UserProfileDAOImpl.getDAO().fetchById(userId);
        long coinWalletId = userProfile.getCoinWalletId();
        int maxCoins = userUpgradeServiceImplement.getUserUpgradeByUserId(userId).getMaxCoins();
        int oldCoins = (int) getCoinByUserId(userId);
        coins = (coins + oldCoins) > maxCoins ? (maxCoins - oldCoins) : coins;
        walletBaseServiceImpl.addCoins(userId, coinWalletId, description, coins);
    }

}
